name: Task - Build Madara

# This workflow builds the main Madara binary and related components
# It also caches the build artifacts for other workflows to use
on:
  workflow_dispatch:
  workflow_call:
    outputs:
      madara-binary-hash:
        description: "Hash of the built binary"
        value: ${{ jobs.build-madara-cairo.outputs.madara-binary-hash }}
      cairo-artifacts-hash:
        description: "Hash of Cairo artifacts"
        value: ${{ jobs.build-madara-cairo.outputs.cairo-artifacts-hash }}

jobs:
  build-madara-cairo:
    name: Build Madara and Cairo
    permissions:
      pull-requests: write
    runs-on: ubuntu-24.04-32core-128gb
    outputs:
      madara-binary-hash: ${{ steps.generate_binary_hash.outputs.hash }}
      cairo-artifacts-hash: ${{ steps.generate_cairo_hash.outputs.hash }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      # Setup the environment with all necessary dependencies
      - uses: ./.github/actions/load-env

      - name: Setup Rust Environment
        uses: ./.github/actions/rust-setup
        with:
          rust-version: ${{ env.BUILD_RUST_VERSION }}
          scarb-version: ${{ env.BUILD_SCARB_VERSION }}
          install-mold: true
          install-scarb: true
          install-foundry: true
          foundry-version: ${{ env.BUILD_FOUNDRY_VERSION }}

      # Build Madara and test contracts
      - name: Build Madara and test contracts
        run: |
          export GIT_COMMIT_HASH=$GITHUB_SHA
          cargo build --release --bin madara
          cargo build --release -p m-cairo-test-contracts

      # Generate hash for the Madara binary
      - name: Generate binary hash
        id: generate_binary_hash
        run: |
          # Path to the compiled Madara binary
          BINARY_PATH=./target/release/madara
          # Get current Unix timestamp for uniqueness
          TIMESTAMP=$(date +%s)
          # Create hash by combining timestamp and binary content
          HASH=$(echo "$TIMESTAMP" | cat - $BINARY_PATH | sha256sum | awk '{ print $1 }')
          # Set output for use in subsequent steps
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          # Save hash to file for artifact sharing
          echo "$HASH" > binary_hash.txt
          echo "Hash of the binary is: $HASH (with timestamp: $TIMESTAMP)"

      - name: Upload binary hash as artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-hash
          path: binary_hash.txt
          retention-days: 1

      - name: Cache Madara binary
        uses: actions/cache@v3
        with:
          path: target/release/madara
          key: ${{ runner.os }}-${{ env.BUILD_MADARA_CACHE_PREFIX }}-bin-${{ steps.generate_binary_hash.outputs.hash }}

      # Generate hash for Cairo artifacts
      - name: Generate Cairo artifacts hash
        id: generate_cairo_hash
        run: |
          # Get current Unix timestamp for uniqueness
          TIMESTAMP=$(date +%s)
          # Generate hash of all files in cairo/target directory
          FILES_HASH=$(find cairo/target -type f -exec sha256sum {} \; | sort | sha256sum | awk '{ print $1 }')
          # Combine timestamp with files hash for unique identifier
          HASH=$(echo "$TIMESTAMP $FILES_HASH" | sha256sum | awk '{ print $1 }')
          # Set output for use in subsequent steps
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          # Save hash to file for artifact sharing
          echo "$HASH" > cairo_artifacts_hash.txt
          echo "Hash of Cairo artifacts is: $HASH (with timestamp: $TIMESTAMP)"

      - name: Upload Cairo artifacts hash
        uses: actions/upload-artifact@v4
        with:
          name: cairo-artifacts-hash
          path: cairo_artifacts_hash.txt
          retention-days: 1

      - name: Cache Cairo build artifacts
        uses: actions/cache@v3
        with:
          path: cairo/target
          key: ${{ runner.os }}-${{ env.BUILD_MADARA_CACHE_PREFIX }}-cairo-${{ steps.generate_cairo_hash.outputs.hash }}

      - name: Display hashes
        run: |
          echo "madara-binary-hash: ${{ steps.generate_binary_hash.outputs.hash }}"
          echo "cairo-artifacts-hash: ${{ steps.generate_cairo_hash.outputs.hash }}"
